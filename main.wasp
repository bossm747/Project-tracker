app ProjectTracker {
  wasp: {
    version: "^0.13.0"
  },
  title: "ProjectTracker",
  client: {
    rootComponent: import { Layout } from "@src/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@src/pages/auth/Signup.jsx"
}

entity User {=psl
    id                 Int            @id @default(autoincrement())
    username           String         @unique
    email              String         @unique
    password           String
    role               String
    profileInformation String
    tasks              Task[]
    notifications      Notification[]
psl=}

entity Task {=psl
    id          Int      @id @default(autoincrement())
    description String
    assignedTo  User     @relation(fields: [userId], references: [id])
    userId      Int
    startDate   DateTime
    dueDate     DateTime
    status      String
    Feature     Feature? @relation(fields: [featureId], references: [id])
    featureId   Int?
psl=}

entity Feature {=psl
    id          Int    @id @default(autoincrement())
    name        String
    description String
    tasks       Task[]
psl=}

entity Notification {=psl
    id      Int    @id @default(autoincrement())
    userId  Int
    type    String
    content String
    status  String
    User    User   @relation(fields: [userId], references: [id])
psl=}

action createTask {
  fn: import { createTask } from "@src/actions.js",
  entities: [Task],
}

action assignTask {
  fn: import { assignTask } from "@src/actions.js",
  entities: [Task, User],
}

action updateTask {
  fn: import { updateTask } from "@src/actions.js",
  entities: [Task],
}

action createFeature {
  fn: import { createFeature } from "@src/actions.js",
  entities: [Feature],
}

action linkFeatureToTask {
  fn: import { linkFeatureToTask } from "@src/actions.js",
  entities: [Feature, Task],
}

action createNotification {
  fn: import { createNotification } from "@src/actions.js",
  entities: [Notification],
}

query getTasks {
  fn: import { getTasks } from "@src/queries.js",
  entities: [Task],
}

query getFeatures {
  fn: import { getFeatures } from "@src/queries.js",
  entities: [Feature],
}

query getNotifications {
  fn: import { getNotifications } from "@src/queries.js",
  entities: [Notification],
}

route DashboardRoute { path: "/", to: Dashboard }
page Dashboard {
  component: import Dashboard from "@src/pages/Dashboard.jsx",
  authRequired: true
}

route TaskRoute { path: "/task/:taskId", to: TaskPage }
page TaskPage {
  component: import TaskPage from "@src/pages/Task.jsx",
  authRequired: true
}

route FeatureRoute { path: "/feature/:featureId", to: FeaturePage }
page FeaturePage {
  component: import FeaturePage from "@src/pages/Feature.jsx",
  authRequired: true
}

route NotificationRoute { path: "/notification/:notificationId", to: NotificationPage }
page NotificationPage {
  component: import NotificationPage from "@src/pages/Notification.jsx",
  authRequired: true
}
